apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: glaceon-operator
    app.kubernetes.io/part-of: glaceon-operator
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: glaceon-operator
    app.kubernetes.io/part-of: glaceon-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      volumes:
        - name: termination-msg
          emptyDir:
            sizeLimit: 256Mi
        - name: dot-fly
          emptyDir:
            sizeLimit: 256Mi
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        image: ghcr.io/twi/glaceon/operator:v0.0.1
        imagePullPolicy: Always
        name: manager
        env:
        - name: MACHINEPROXY_IMAGE
          value: ghcr.io/twi/glaceon:latest
        - name: FLY_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: glaceon-operator
              key: FLY_API_TOKEN
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
            - mountPath: /tmp
              name: termination-msg
            - mountPath: /.fly
              name: dot-fly
        terminationMessagePath: /tmp/why.txt
      terminationGracePeriodSeconds: 10
      serviceAccountName: controller-manager
